    if game.PlaceId ~= 16146832113 then return end

    -- üõ†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    local SETTINGS_TO_ENABLE = {
        ["Gameplay"] = {
            "AutoSkipWaves",
            "DisableMatchEndRewardsView",
        },
        ["Graphics"] = {
            "LowDetailMode",
            "DisableViewCutscenes",
            "DisableCameraShake",
            "DisableDepthOfField"
        },
        ["Miscellaneous"] = {
            "SkipSummonAnimation"
        },
        ["Events"] = {
            "RandomSacrificeDomain"
        },
        ["Enemies"] = {
            "DisableEnemyTags",
            "SimplifiedEnemyGui"
        },
        ["Units"] = {
            "DisableDamageIndicators",
            "DisableVisualEffects",
        }
    }
    -- üîß –§—É–Ω–∫—Ü–∏—è: –≤–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    local function toggleSetting(categoryName, settingName)
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
        local sliderPath = playerGui:FindFirstChild("Windows")
            and playerGui.Windows.Settings.Holder.Main.ScrollingFrame:FindFirstChild(categoryName)
            and playerGui.Windows.Settings.Holder.Main.ScrollingFrame[categoryName]:FindFirstChild(settingName)
            and playerGui.Windows.Settings.Holder.Main.ScrollingFrame[categoryName][settingName]:FindFirstChild("Slider")

        if not sliderPath then
            warn(`‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {settingName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {categoryName}`)
            return
        end

        local ball = sliderPath:FindFirstChild("Ball")
        local uiStroke = ball and ball:FindFirstChild("UIStroke")

        -- –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ (–∫—Ä–∞—Å–Ω—ã–π) ‚Üí –≤–∫–ª—é—á–∞–µ–º
        if uiStroke and uiStroke.Color == Color3.fromRGB(0, 255, 180) and settingName == "RandomSacrificeDomain" then
            local args = { "Toggle", settingName }
            pcall(function()
                game.ReplicatedStorage:WaitForChild("Networking"):WaitForChild("Settings"):WaitForChild("SettingsEvent"):FireServer(unpack(args))
            end)
            print(`‚ùå {settingName} –≤—ã–∫–ª—é—á–µ–Ω`)
            return
        elseif settingName == "RandomSacrificeDomain" then
            print("‚ùå {settingName} —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω")
        end
        if uiStroke and uiStroke.Color == Color3.fromRGB(255, 0, 75) and settingName ~= "RandomSacrificeDomain" then
            local args = { "Toggle", settingName }
            pcall(function()
                game.ReplicatedStorage:WaitForChild("Networking"):WaitForChild("Settings"):WaitForChild("SettingsEvent"):FireServer(unpack(args))
            end)
            print(`‚úÖ {settingName} –≤–∫–ª—é—á—ë–Ω`)
        else
            print(`üü¢ {settingName} —É–∂–µ –≤–∫–ª—é—á—ë–Ω`)
        end
    end

    -- üöÄ –ó–∞–ø—É—Å–∫
    task.spawn(function()
        if not game:IsLoaded() then
            game.Loaded:Wait()
        end
        task.wait(2) -- –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ GUI

        print("üîß –ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

        -- –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for categoryName, settingsList in pairs(SETTINGS_TO_ENABLE) do
            for _, settingName in ipairs(settingsList) do
                pcall(toggleSetting, categoryName, settingName)
                task.wait(0.1) -- –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            end
        end

        print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    end)